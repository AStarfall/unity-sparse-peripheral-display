// #pragma kernel CalculateAverageColors

// // Eingabevariablen
// Texture2D<float4> CameraTexture;
// RWStructuredBuffer<float3> AverageColors;
// RWStructuredBuffer<int> ProbeCounts;

// [numthreads(8, 8, 1)]
// void CalculateAverageColors(uint3 id : SV_DispatchThreadID)
// {
//     uint2 texelCoord = id.xy;

//     // Lese den Pixelwert aus der Kameratextur
//     float4 pixel = CameraTexture[texelCoord];

//     // Berechne den Index der n채chstgelegenen Light Probe
//     int nearestProbeIndex = /* Hier den Code zur Berechnung des n채chsten Probeindex einf체gen */;

//     // Aktualisiere die Durchschnittsfarbe und den Probez채hler
//     InterlockedAdd(AverageColors[nearestProbeIndex], pixel.rgb);
//     InterlockedAdd(ProbeCounts[nearestProbeIndex], 1);
// }

#pragma kernel CalculateAverageColors

StructuredBuffer<float2> probePositions;
StructuredBuffer<int> nearestProbeIndices;
RWStructuredBuffer<float4> cameraPixels;
RWStructuredBuffer<float4> averageColors;
RWStructuredBuffer<int> probeCounts;

[numthreads(8, 8, 1)]
void CalculateAverageColors(uint3 id : SV_DispatchThreadID)
{
    uint pixelIndex = id.y * cameraPixels.GetDimensions().x + id.x;
    int nearestProbeIndex = nearestProbeIndices[pixelIndex];

    InterlockedAdd(probeCounts[nearestProbeIndex], 1);
    InterlockedAdd(averageColors[nearestProbeIndex], cameraPixels[pixelIndex]);
}

